// Modest Modal 1.0.0
// Jonathan Halchak, www.jrhalchak.com, @onlinebhero
// License: MIT - do whatever you want
!function(o,t,a,e){var n=[],s=!1;o.modestmodal=o.modestmodal||function(t){function a(o){return o?{type:o.type||i.type,content:o.content||i.content,closeButton:o.closeButton||i.closeButton,openSelector:o.openSelector||i.openSelector,modalClass:o.modalClass||i.modalClass,transitionDuration:o.transitionDuration||i.transitionDuration,positionX:o.positionX||i.positionX,positionY:o.positionY||i.positionY,overlayBackground:o.overlayBackground||i.overlayBackground,disableEscape:"undefined"!=typeof o.disableEscape?o.disableEscape:i.disableEscape,uncloseable:"undefined"!=typeof o.uncloseable?o.uncloseable:i.uncloseable}:{}}function e(t,a){n.push({modal:t,overlay:a}),t.appendTo("body").css("display","block"),a.appendTo("body").css("visibility","visible"),setTimeout(function(){a.css("opacity",1).on("click",function(){o(this).hasClass("uncloseable")||o.modestmodal.close()}),t.css({opacity:1,top:"50%"})},300)}function l(t){o("body").on("click",t,function(){o.modestmodal.close()})}var i={$modal:o('<div class="modestmodal-modal" />'),$overlay:o('<div class="modestmodal-overlay" />'),closeButton:".modestmodal-close",openSelector:"[data-modestmodal]",type:null,content:"",modalClass:"",zIndex:99900,transitionDuration:"0.4s",transitionProperty:{"-webkit-transition":"all 0.4s ease","-moz-transition":"all 0.4s ease",transition:"all 0.4s ease;"},positionX:"50%",positionY:"60%",modalStyles:{display:"none",position:"fixed","-webkit-transform":"translate(-50%, -50%)","-ms-transform":"translate(-50%, -50%)",transform:"translate(-50%, -50%)",opacity:0},overlayStyles:{visibility:"hidden",position:"fixed",top:0,bottom:0,left:0,right:0,opacity:0,width:"100%",height:"100%","background-color":"black"},overlayBackground:"rgba(0,0,0,0.3)",uncloseable:!1,disableEscape:!1,ajaxCallback:null};o.modestmodal.init=function(){i=o.extend({},i,a(t)),l(i.closeButton),o("body").on("click",i.openSelector,function(){var t=o(this),a={type:t.data("modestmodal-type")||i.type,content:t.data("modestmodal-content")||i.content,modalClass:t.data("modestmodal-modal-class")||i.modalClass,closeButton:t.data("modestmodal-close-selector")||i.closeButton,transitionDuration:t.data("modestmodal-transition-duration")||i.transitionDuration,positionX:t.data("modestmodal-position-x")||i.positionX,positionY:t.data("modestmodal-position-y")||i.positionY,overlayBackground:t.data("modestmodal-overlay-background")||i.overlayBackground,disableEscape:"undefined"!=typeof t.attr("data-modestmodal-disable-escape")?!0:!1,uncloseable:"undefined"!=typeof t.attr("data-modestmodal-uncloseable")?!0:!1};a.closeButton!==i.closeButton&&l(a.closeButton),o.modestmodal.open(a)}).on("keyup",function(t){var a=n.length>0?n[n.length-1].overlay:null;27==t.which&&a&&!a.hasClass("disableEscape")&&o.modestmodal.close()})},o.modestmodal.open=function(t){var s=i.$overlay.clone(),l=i.$modal.clone(),d=n.length+1,c=o.extend({},i,a(t)),r=c.overlayStyles;return c.type?(c.transitionDuration!==i.transitionDuration&&(c.transitionProperty={"-webkit-transition":"all "+c.transitionDuration+"ease","-moz-transition":"all "+c.transitionDuration+"ease",transition:"all "+c.transitionDuration+"ease"}),r.background=c.overlayBackground,s.attr("id","modestmodal-overlay-"+d).css(r).css(c.transitionProperty).css("z-index",d+c.zIndex),c.uncloseable&&s.addClass("uncloseable"),c.disableEscape&&s.addClass("disableEscape"),l.addClass(c.modalClass).attr("id","modestmodal-modal-"+d).css(c.modalStyles).css(c.transitionProperty).css({"z-index":d+c.zIndex+1,top:c.positionY,left:c.positionX}),void("content"==c.type||"html"==c.type?(l.html("html"==c.type?o(c.content).html():c.content),e(l,s)):"ajax"==c.type&&o.get(c.content).then(function(o){l.html(o),e(l,s),"function"==typeof c.ajaxCallback&&c.ajaxCallback()}).error(function(){console.log("modestmodal: Error with AJAX call.")}))):!1},o.modestmodal.close=function(){var o=n.pop();o.modal.css("opacity",0),o.overlay.css("opacity",0),setTimeout(function(){o.modal.remove(),o.overlay.remove()},400)},o.modestmodal.destroy=function(){o("[id^=modestmodal-],[class^=modestmodal-]").remove(),o.modestmodal.prototype.destroy.apply(this,arguments)},s?t&&(i=o.extend({},i,a(t))):(o.modestmodal.init(),s=!0)}}(jQuery,window,document);
//# sourceMappingURL=data:application/json;base64,